import exported from './assets/web-provenance-export.json';
import { 
  ProvenanceNode,
  uniqueId, 
  Study, 
  InformationField,
  flat,
  isDefined,
  DependencyType,
  Schema,
  RelationshipSchema,
  TypeOf,
  InformationRelationshipSchema,
  DependencyRelationshipSchema,
} from 'common';

const typeToDefinition: { [k: string]: string } = {
  'wet-lab-data': 'WetLabData',
  'model': 'Model',
  'model-exploration-activity': 'ModelExplorationActivity',
  'model-building-activity': 'ModelBuildingActivity',
  'simulation-data': 'SimulationData',
}


const typeToType: { [k: string]: DependencyType } = {
  'generated-by': 'Generated by',
  'derived-by': 'Derived from',
  'used': 'Used',
  'used-for-calibration': 'Used for calibration',
  'used-for-validation': 'Used for validation',
}

const studyIdMap: { [k: number]: string } = {};

export const studies: Study[] = exported.models.filter(study => study !== null).map((study) => {
    const studyId = uniqueId();
    studyIdMap[study!.id] = studyId;
    return {
        id: studyId,
        source: study!.source,
    }
});

export interface Relationship<A extends Schema, B extends Schema, R extends RelationshipSchema<A, B>> {
  schema: R;
  source: TypeOf<A>;
  target: TypeOf<B>;
  properties: TypeOf<R>;
}

export const connections: Relationship<Schema, Schema, RelationshipSchema<Schema, Schema>>[] = [];
const addRelationship = <A extends Schema, B extends Schema, R extends RelationshipSchema<A, B>>(
  relationship: Relationship<A, B, R>,
) => {
  connections.push(relationship);
}


export const nodes: ProvenanceNode[] = Object.values(exported.nodes).map((node) => {
  const definitionId = typeToDefinition[node.type];
  if (!definitionId) {
    throw Error('Lookup does not contain ' + node.type);
  }

  return {
    id: node.id,
    definitionId: definitionId,
    studyId: node.studyId !== undefined ? studyIdMap[node.studyId] : undefined,
    label: node.name,
  }
});

Object.values(exported.nodes).forEach((node) => {
  if (!node.connections) {
    return;
  }

  node.connections.forEach((connection) => {
    addRelationship({
      schema: DependencyRelationshipSchema,
      source: node,
      target: {
        id: connection.targetId,
      },
      properties: {
        id: connection.id,
        type: typeToType[connection.type],
      }
    });
  });
});


export const informationNodes: InformationField[] = flat(Object.values(exported.nodes).map((node) => {
  if (!node.information) {
      return;
  }

  const informationNodes = node.information.map((information): InformationField => {
    return {
      id: uniqueId(),
      key: information[0],
      value: information[1],
    }
  });

  informationNodes.forEach((field) => {
    addRelationship({
      schema: InformationRelationshipSchema,
      source: node,
      target: field,
      properties: {
        id: uniqueId(),
      }
    })
  })

  return informationNodes;
}).filter(isDefined));